@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using LMS.Shared.Dtos
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@page "/studentoverview/{UserId}"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (applicationUser == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card mb-3">
        <div class="card-header">User Information</div>
        <div class="card-body">
            <h5 class="card-title">@applicationUser.FullName</h5>
            <p class="card-text">Email: @applicationUser.Email</p>

            @if (applicationUser.Course != null)
            {
                <p class="card-text">Course: @applicationUser.Course.Name</p>
                <p class="card-text">Course Description: @applicationUser.Course.Description</p>

                <div>
                    <h4>Course Participants:</h4>
                    <ul class="list-group">
                        @foreach (var participant in applicationUser.CourseParticipants)
                        {
                            <li class="list-group-item">@participant.FullName - @participant.Email</li>
                        }
                    </ul>
                </div>

                <div>
                    <h4>Modules:</h4>
                    @foreach (var module in applicationUser.Modules)
                    {
                        <div class="card mb-2">
                            <div class="card-body">
                                <h5 class="card-title">@module.Name</h5>
                                <p class="card-text">@module.Description</p>
                                <p class="card-text">Start: @module.StartDate.ToShortDateString() - End: @module.EndDate.ToShortDateString()</p>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="card-text">No Course information available</p>
            }
        </div>
    </div>

    @if (isUserInTeacherRole)
    {
        <div>
            <!-- Add teacher-specific content or buttons here -->
            <button class="btn btn-primary" @onclick="AddCourse">Add Course</button>
            <button class="btn btn-secondary" @onclick="EditCourse">Edit Course</button>
            <button class="btn btn-danger" @onclick="DeleteCourse">Delete Course</button>
        </div>
    }
}

@code {
    [Parameter]
    public string UserId { get; set; }

    private ApplicationUserDTO applicationUser;
    private bool isUserInTeacherRole;

    protected override async Task OnInitializedAsync()
    {
        await RefreshUserData();
    }

    private async Task AddCourse()
    {
        try
        {
            

            if (isUserInTeacherRole)
            {
                // Navigate to the AddCourse page
                NavigationManager.NavigateTo("/addCourse");
            }
            else
            {
                Console.WriteLine("User is not authorized to add a course.");
            }

            // Reload the user data after the operation
            await RefreshUserData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding course: {ex}");
            // Optionally, provide feedback to the user about the error
        }
    }

    private async Task EditCourse()
    {
        if (isUserInTeacherRole)
        {
            // Navigate to the AddCourse page
            NavigationManager.NavigateTo($"/editCourse/{applicationUser.Course.Id}");
        }
        else
        {
            Console.WriteLine("User is not authorized to add a course.");
        }
        await RefreshUserData();
    }

    private async Task DeleteCourse()
    {
        try
        {
            if (isUserInTeacherRole)
            {
                var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this course?");

                if (confirmDelete)
                {
                    var response = await Http.DeleteAsync($"https://localhost:7050/api/ApplicationUser/DeleteCourse/{applicationUser.Course.Id}");
                    response.EnsureSuccessStatusCode();

                   
                }
            }
            else
            {
                // Handle unauthorized access for deletion
                Console.WriteLine("Unauthorized access to delete course.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting course: {ex}");
            // Optionally, provide feedback to the user about the error
        }
    }

    private async Task RefreshUserData()
    {
        try
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;
            var userRoles = user.FindAll("role").Select(r => r.Value).ToList();

            applicationUser = await Http.GetFromJsonAsync<ApplicationUserDTO>($"https://localhost:7050/api/ApplicationUser/{UserId}");

            // Check if the user is in the "Teacher" role
            isUserInTeacherRole = userRoles.Contains("Teacher");

            Console.WriteLine($"Received user data: {JsonSerializer.Serialize(applicationUser)}");
        }
        catch (Exception ex)
        {
            // Log or print the exception details for debugging
            Console.WriteLine($"Error fetching user data: {ex.Message}");
        }
    }
}