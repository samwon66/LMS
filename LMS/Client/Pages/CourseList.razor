
@using System.Net.Http

@using LMS.Shared.Dtos
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@page "/courselist"

<h3>Courses</h3>

@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
        <a href="/Components/CourseCreate">Create New</a>
    </p>


    <table class="table table-sm table-striped">
        <thead>
            <tr>
                <th scope="col">Course ID </th>
                <th scope="col">Name</th>
                <th scope="col">Description</th>
                <th scope="col">Start Date</th>
                <th scope="col">Modules</th>
                <th scope="col">Update</th>
                <th scope="col">Delete</th>
            </tr>
        </thead>

        <tbody>

            @foreach (var course in courses)
            {
                <tr>
                    <th scope="row">@course.Id</th>
                    <td>@course.Name</td>
                    <td>@course.Description</td>
                    <td>@course.StartDate</td>
                    <td scope="row"><a href="@($"moduleslist/{course.Id}")" class="btn btn-outline-primary">Show list</a></td>
                    <td scope="row"><a href="@($"editCourse/{course.Id}")" class="btn btn-outline-primary">Update</a></td>
                    <td scope="row"><a href="@($"coursedelete/{course.Id}")" class="btn btn-outline-primary">Delete</a></td>


                </tr>
            }

        </tbody>

    </table>
}

@code {
    private CourseDTO[]? courses;

    // existing code

    protected override async Task OnInitializedAsync()
    {
        await FetchCourses();
    }

    private async Task FetchCourses()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Fetch courses from the new GetCoursesList action
            courses = await Http.GetFromJsonAsync<CourseDTO[]>("/api/course");
        }
        else
        {
            // User is not authenticated
        }
    }

    @code {
        private async Task DeleteCourse(Guid courseId)
        {
            try
            {
                var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this course?");

                if (confirmDelete)
                {
                    var response = await Http.DeleteAsync($"https://localhost:7050/api/courses/{courseId}");
                    response.EnsureSuccessStatusCode();

                    // Refresh the course list after deletion
                    await FetchCourses();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting course: {ex}");
                // Optionally, provide feedback to the user about the error
            }
        }
    }
}