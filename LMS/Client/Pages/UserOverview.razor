@page "/useroverview/{userId}"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@inject NavigationManager NavigationManager
<h3>User Overview</h3>

@if (user != null)
{
    <p><strong>User Information:</strong></p>
    <p><strong>User ID:</strong> @user.Id</p>
    <p><strong>User Name:</strong> @user.UserName</p>
    <p><strong>First Name:</strong> @user.FirstName</p>
    <p><strong>Last Name:</strong> @user.LastName</p>
    <p><strong>Full Name:</strong> @user.FullName</p>
    <p><strong>Course ID:</strong> <a href="javascript:void(0);" @onclick="() => NavigateToCourseDetails()">@user.CourseId</a></p>

    @if (!string.IsNullOrEmpty(user.CourseUrl))
    {
        <p><strong>Course:</strong> <a href="@user.CourseUrl">Go to Course</a></p>
    }
    else
    {
        <p><strong>Course:</strong> Not applicable</p>
    }
}
else if (!string.IsNullOrEmpty(UserId))
{
    <p><strong>Error:</strong> Invalid User ID specified in the URL.</p>
}
else
{
    <p><strong>Error:</strong> An unexpected error occurred.</p>
}

@code {
    [Parameter] public string UserId { get; set; }
    private UserDTO user;


    private void NavigateToCourseDetails()
    {
        NavigationManager.NavigateTo($"/courseOverview/{user.CourseId}");
    }
  

       


    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Guid.TryParse(UserId, out Guid userIdGuid))
            {
                var httpClient = new HttpClient();
                user = await httpClient.GetFromJsonAsync<UserDTO>($"https://localhost:7050/api/user/{userIdGuid}");
            }
            else
            {
                Console.WriteLine($"Error: Invalid User ID specified in the URL - {UserId}");
                user = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            user = null;
        }
    }
}